knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(forcats)
library(gapminder)
perm_mean <- function(perms = 1000, all_values, n_A) {
## Variables ##
# perms: The number of permutations
# all_values (num): all data values
# n_A (int): Size of group A
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
perm_mean_diffs <- numeric(perms)
# Loop throught number of permutations
for(i in c(1:perms)) {
# Step 2:
# Randomly separate vector "values" into disjoint
# groups of size "nA" and "nB" respectively
rand_order <- sample(all_values)
group_A <- rand_order[1:n_A]
group_B <- rand_order[(n_A+1):length(all_values)]
# Step 3:
# Compute the sample means for the two groups from
# step 2
A_bar <- mean(group_A)
B_bar <- mean(group_B)
# Step 4:
# Compute the difference in sample means, store the
# value in the vector from step 1
diff_means <- A_bar - B_bar
perm_mean_diffs[i] <- diff_means
}
# Step 5:
# Return the permuted mean differences vector
return(perm_mean_diffs)
}
perm_cor <- function(perms = 1000, x, y)
{
## Variables ##
# perms: The number of permutations
# x: Vector of Variable 1 - for computing correlation
# y: Vector of Variable 2 - for computing correlation
###############
# Step 1:
# Create vector of zeroes of length "perms" to store
# permuted mean differnces
corrs<-numeric(perms)
# Loop throught number of permutations
for (i in c(1:perms))
{
# Step 2:
# Randomly mix up the values in the vector "y"
randY<-sample(y)
# Step 3:
# Compute the correlation between x and the randomly mixed
# up y-vector. Store this value in the vector from step 1.
corrs[i]<-cor(x,randY)
}
# Step 4:
# Return new updated vector, created in step 1
return(corrs)
}
yes1<-gapminder$lifeExp
yes2<-gapminder$pop
yes3<-perm_cor(1000,yes1,yes2)
hist(yes3)
yes3
