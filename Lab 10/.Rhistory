knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv")
answers <- read_csv("Answers_trunc.csv")
questions <- questions %>%
select(-X7) %>%
rename(c("Question" = "Title"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv")
answers <- read_csv("Answers_trunc.csv")
questions <- questions %>%
select(-X7) %>%
rename(c("Question" = "Title"))
questions <- questions %>%
select(-X7)
answers <- answers %>%
select(-X7)
(questions)
(answers)
questions <- questions %>%
select(-X7)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv")
answers <- read_csv("Answers_trunc.csv")
questions <- questions %>%
select(-X7)
answers <- answers %>%
select(-X7)
(questions)
(answers)
full_join(questions, answers, by = c("Id" = "ParentId"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", col_names = c("Id", "OwnerUserId", "CreationDate", "Score", "Question", "Body", "X7"))
answers <- read_csv("Answers_trunc.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Id", "OwnerUserId", "CreationDate", "Score", "Question", "Body", "X7"))
answers <- read_csv("Answers_trunc.csv")
(questions)
(answers)
full_join(questions, answers, by = c("Id" = "ParentId"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Id", "OwnerUserId", "CreationDate_Q", "Score_Q", "Question", "Body_Q", "X7")) %>%
select("Id", "OwnerUserId", "CreationDate_Q", "Score_Q", "Question", "Body_Q")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Id_A", "OwnerUserId_A", "CreationDate_A", "ParentId", "Score_A", "Body_A", "X7")) %>%
select("ParentId", "Id_A", "OwnerUserId_A", "CreationDate_A", "Score_A", "Body_A")
(questions)
(answers)
full_join(questions, answers, by = c("Id" = "ParentId"))
(questions)
(answers)
full_join(questions, answers, by = c("Id" = "ParentId")) %>%
select("Id", "Id_A", "OwnerUserId", "OwnerUserId_A", "CreationDate_Q",  "CreationDate_A", "Score_Q", "Score_A", "Question", "Body_Q", "Body_A")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer", "X7")) %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Question_Id", "Score", "User_Answer", "X7")) %>%
select("Question_Id", "Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Score", "User_Answer")
(questions)
(answers)
full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
(questions)
(answers)
dataBase <- full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
dataBase %>% select("Answer_Owner_Id", "Question_Id", "Score", "Outof_Score")
(questions)
(answers)
dataBase <- full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
dataBase %>% select("Answer_Owner_Id", "Question_Id", "Score", "Outof_Score") %>% arrange(Answer_Owner_Id)
(questions)
(answers)
dataBase <- full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
dataBase %>% group_by(Answer_Owner_Id) %>% summarise(totalScore = sum(Score), totalOutofScore = sum(Outof_Score))
questions %>% filter(is.na(Question_Id))
(answers)
questions %>% filter(is.na(Question_Id))
questions %>% filter(is.na(Question_Owner_Id))
questions %>% filter(is.na(Question_Creation_Date))
questions %>% filter(is.na(Outof_Score))
questions %>% filter(is.na(Question))
questions %>% filter(is.na(Correct_Answer))
questions %>% filter(is.na(Question_Owner_Id))
answers %>% filter(is.na(Question_Id))
answers %>% filter(is.na(Answer_Id))
answers %>% filter(is.na(Answer_Owner_Id))
answers %>% filter(is.na(Answer_Owner_Id))
answers %>% filter(is.na(Answer_Creation_Date))
answers %>% filter(is.na(Answer_Owner_Id))
answers %>% filter(is.na(Score))
dataBase <- full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
answers %>% filter(is.na(Answer_Owner_Id))
answers %>% filter(is.na(User_Answer))
dataBase %>% group_by(Answer_Owner_Id) %>%
summarise(count = n())
dataBase %>% group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score))
dataBase %>%
filter(!is.na(Answer_Owner_Id)) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score))
dataBase %>% filter(Answer_Owner_Id == 116)
dataBase %>% filter(is.na(Question_Id))
dataBase %>% filter(is.na(Question_Id))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Creation_Date))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Creation_Date))
dataBase %>% filter(is.na(Answer_Id))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Creation_Date))
dataBase %>% filter(is.na(Answer_Id))
dataBase %>% filter(is.na(Answer_Owner_Id))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Creation_Date))
dataBase %>% filter(is.na(Answer_Id))
dataBase %>% filter(is.na(Answer_Owner_Id))
dataBase %>% filter(is.na(Answer_Creation_Date))
dataBase %>% filter(is.na(Question_Owner_Id))
dataBase %>% filter(is.na(Question_Creation_Date))
dataBase %>% filter(is.na(Answer_Id))
dataBase %>% filter(is.na(Answer_Owner_Id))
dataBase %>% filter(is.na(Answer_Creation_Date))
dataBase %>% filter(is.na(Score))
dataBase %>% filter(is.na(Outof_Score))
dataBase %>% filter(is.na(Question))
dataBase %>% filter(is.na(User_Answer))
dataBase %>% filter(is.na(Correct_Answer))
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score)) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score))
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score))
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score), percent = sumScore/sumOutOf)
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score), percent = 100*sumScore/sumOutOf) %>%
arrange(percent)
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score), percent = sumScore/sumOutOf) %>%
arrange(percent)
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score), percent = 100*sumScore/sumOutOf) %>%
arrange(desc(percent))
dataBase %>%
filter(!is.na(Answer_Owner_Id), !is.na(Score), !is.na(Outof_Score), Outof_Score != 0) %>%
group_by(Answer_Owner_Id) %>%
summarise(count = n(), sumScore = sum(Score), sumOutOf = sum(Outof_Score), percent = 100*sumScore/sumOutOf) %>%
arrange(desc(sumScore))
dataBase %>% filter(is.na(Question_Owner_Id))      #10,716
dataBase %>% filter(is.na(Question_Creation_Date)) # 7,904
dataBase %>% filter(is.na(Answer_Id))              #    67
dataBase %>% filter(is.na(Answer_Owner_Id))        # 1,143
dataBase %>% filter(is.na(Answer_Creation_Date))   #    67
dataBase %>% filter(is.na(Score))                  #    67
dataBase %>% filter(is.na(Outof_Score))            #    11
dataBase %>% filter(is.na(Question))               #    11
dataBase %>% filter(is.na(User_Answer))            #    11
dataBase %>% filter(is.na(Correct_Answer))         #    11
dataBase %>% summarise(dif = Answer_Creation_Date - Question_Creation_Date)
dataBase %>% mutate(dif = Answer_Creation_Date - Question_Creation_Date)
dataBase %>% mutate(dif = Answer_Creation_Date - Question_Creation_Date) %>% select("dif")
dataBase %>% mutate(dif = Answer_Creation_Date - Question_Creation_Date) %>% select("dif", "Score", "Outof_Score")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer", "X7")) %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Question_Id", "Score", "User_Answer", "X7")) %>%
select("Question_Id", "Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Score", "User_Answer")
dataBase <- full_join(questions, answers, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
dataBase %>% filter(is.na(Question_Owner_Id))      #10,716
dataBase %>% filter(is.na(Question_Creation_Date)) # 7,904
dataBase %>% filter(is.na(Answer_Id))              #    67
dataBase %>% filter(is.na(Answer_Owner_Id))        # 1,143
dataBase %>% filter(is.na(Answer_Creation_Date))   #    67
dataBase %>% filter(is.na(Score))                  #    67
dataBase %>% filter(is.na(Outof_Score))            #    11
dataBase %>% filter(is.na(Question))               #    11
dataBase %>% filter(is.na(User_Answer))            #    11
dataBase %>% filter(is.na(Correct_Answer))         #    11
dataBase %>% mutate(dif = Answer_Creation_Date - Question_Creation_Date) %>% select("dif", "Score", "Outof_Score")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer", "X7")) %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Question_Id", "Score", "User_Answer", "X7")) %>%
select("Question_Id", "Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Score", "User_Answer")
dataBase <- answers %>% left_join(questions, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
(dataBase)
dataBase %>% filter(is.na(Question_Owner_Id))      #10,716
dataBase %>% filter(is.na(Question_Creation_Date)) # 7,904
dataBase %>% filter(is.na(Answer_Id))              #    67
dataBase %>% filter(is.na(Answer_Owner_Id))        # 1,143
dataBase %>% filter(is.na(Answer_Creation_Date))   #    67
dataBase %>% filter(is.na(Score))                  #    67
dataBase %>% filter(is.na(Outof_Score))            #    11
dataBase %>% filter(is.na(Question))               #    11
dataBase %>% filter(is.na(User_Answer))            #    11
dataBase %>% filter(is.na(Correct_Answer))         #    11
(dataBase)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer", "X7")) %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Outof_Score", "Question", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Question_Id", "Score", "User_Answer", "X7")) %>%
select("Question_Id", "Answer_Id", "Answer_Owner_Id", "Answer_Creation_Date", "Score", "User_Answer")
dataBase <- answers %>% left_join(questions, by = "Question_Id") %>%
select("Question_Id", "Question_Owner_Id", "Question_Creation_Date", "Answer_Id", "Answer_Owner_Id",  "Answer_Creation_Date", "Score", "Outof_Score", "Question", "User_Answer", "Correct_Answer")
dataBase %>% filter(is.na(Question_Owner_Id))      #10,716
dataBase %>% filter(is.na(Question_Creation_Date)) # 7,904
dataBase %>% filter(is.na(Answer_Id))              #    67
dataBase %>% filter(is.na(Answer_Owner_Id))        # 1,143
dataBase %>% filter(is.na(Answer_Creation_Date))   #    67
dataBase %>% filter(is.na(Score))                  #    67
dataBase %>% filter(is.na(Outof_Score))            #    11
dataBase %>% filter(is.na(Question))               #    11
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(nycflights13)
(flights)
(flights)
(weather)
(flights)
(airports)
(weather)
(planes)
(airlines)
airports %>% separate(tzone, into=c("Country", "City"), by="/")
flights %>% filter(orgin = "")
airports %>% separate(tzone, into=c("Country", "City"), by="/")
airports %>% separate(tzone, into=c("Country", "City"), by="/") %>% filter(City == "New")
weather %>% group_by(origin) %>5%
summarise(avg = mean(temp))
weather %>% group_by(origin) %>%
summarise(avg = mean(temp))
left_join(flight, weather, by = origin)
left_join(flights, weather, by = origin)
left_join(flights, weather, by = origin)
left_join(flights, weather, by = origin)
left_join(flights, weather, by = origin)
left_join(flights, weather, by = "origin")
semi_join(flights, weather, by = "time_hour")
inner_join(flights, weather, by = "time_hour")
flights %>% left_join(weather)
flights %>% left_join(weather) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% left_join(weather) %>%
group_by(dest) %>%
filter(is.na(temp))
summarise(avg_temp = mean(temp)) %>%
flights %>% left_join(weather) %>%
group_by(dest) %>%
filter(is.na(temp)) %>%
summarise(avg_temp = mean(temp))
flights %>% left_join(weather) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp)) %>%
filter(is.na(avg_temp))
flights %>% left_join(weather) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp)) %>%
filter(!is.na(avg_temp))
flights %>% left_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp)) %>%
filter(!is.na(avg_temp))
flights %>% left_join(planes)
flights %>% left_join(planes, by = "tailnum")
flights %>%
left_join(planes, by = "tailnum") %>%
mutate(age = year.x - year.y)
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp)) %>%
filter(!is.na(avg_temp))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% outer_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% left_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>%
inner_join(planes, by = "tailnum") %>%
mutate(age = year.x - year.y)
flights %>% full_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% semi_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% anti_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% innner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour"))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour")) %>%
group_by(dest) %>%
summarise(avg_temp = mean(temp))
flights %>% inner_join(weather, by = c("year", "month", "day", "hour", "origin", "time_hour"))
per80 <- 15
semi_join(weather, flights %>% filter(dep_delay > per80), by = c("year", "month", "day", "hour", "origin", "time_hour"))
join(flights, airlines, by = "carrier")
left_join(flights, airlines, by = "carrier")
left_join(flights, airlines, by = "carrier") %>%
group_by(carrier) %>%
summarise(count = n())
left_join(flights, airlines, by = "carrier") %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arragne(desc(count))
left_join(flights, airlines, by = "carrier") %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arrange(desc(count))
right_join(flights, airlines, by = "carrier") %>%
group_by(carrier) %>%
summarise(count = n()) %>%
arrange(desc(count))
anti_join(airports, flights, by=c("faa" = "dest"))
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(stringr)
questions <- read_csv("Questions_trunc.csv")
answers <- read_csv("Answers_trunc.csv")
q_time <- questions %>%
separate(CreationDate, into = c('Date', 'Time'), sep = " ") %>%
separate('Time', into = c('hour', 'min', 'sec'), sep = ':') %>%
mutate(temp = ifelse(hour>=16 & hour<=19 , "Good Time", "Bad Time")) %>%
mutate(s = ifelse(Score>=51, "High Score", "Low Score")) %>%
select(-X7)
a_time <- answers %>%
separate(CreationDate, into = c('Date', 'Time'), sep = " ") %>%
separate('Time', into = c('hour', 'min', 'sec'), sep = ':') %>%
mutate(temp = ifelse(hour>=16 & hour<=19 , "Good Time", "Bad Time")) %>%
mutate(s = ifelse(Score>=51, "High Score", "Low Score")) %>%
select(-X7)
ggplot(data = a_time) +
geom_bar(mapping  = aes(temp, fill = temp)) +
facet_wrap(.~s) +
theme_dark() +
labs(title = "Time of Day Posting Relation to Scores for Questions", caption = "A high score is above 50 \n A Good Time is between 4pm and 8pm", x = "Time of Day", fill = "Time of Day", y = "Count")
ggplot(data = q_time) +
geom_bar(mapping  = aes(temp, fill = temp)) +
facet_wrap(.~s) +
theme_dark() +
labs(title = "Time of Day Posting Relation to Scores for Questions", caption = "A high score is above 50 \n A Good Time is between 4pm and 8pm", x = "Time of Day", fill = "Time of Day", y = "Count")
merged <- answers %>%
left_join(questions, c('ParentId' = 'Id'))
merged <- merged %>%
mutate(total_time = CreationDate.x - CreationDate.y) %>%
filter(total_time>0)
ggplot(data = merged, mapping = aes(y = Score.x, x = total_time)) +
geom_point() +
geom_smooth() +
ylim(0, 100) +
geom_vline(xintercept=604800, color = "red")+
labs(x = "Time Since Question Was Posted", y = "Score of Answer", title = "How the Score of the answer is effected by time ellapsed since question was posted", caption = "red line indicates 1 week mark between when a question is asked and when it gets answered") +
theme_bw()
question_count <- data %>%
filter(Total_Score != 0, Total_Score >= Score) %>%
mutate(count = str_count(Question, "[:blank:]")) %>%
group_by(count) %>%
summarise(avg_score = mean(Score / Total_Score * 100)) %>%
arrange(desc(avg_score))
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Testee_Id", "Answered_Date", "Question_Id", "Score", "Answer", "X7"))
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Creator_Id", "Creation_Date", "Total_Score", "Question", "Correct_Answer", "X7"))
data <-
answer %>%
left_join(question, "Question_Id") %>%
mutate(Total_Time = Answered_Date - Creation_Date) %>%
filter(Total_Time > 0) %>%
select("Question_Id", "Answer_Id", "Creator_Id", "Testee_Id", "Creation_Date", "Answered_Date", "Total_Time", "Score", "Total_Score", "Question", "Answer", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Testee_Id", "Answered_Date", "Question_Id", "Score", "Answer", "X7"))
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Creator_Id", "Creation_Date", "Total_Score", "Question", "Correct_Answer", "X7"))
data <-
answerS %>%
left_join(question, "Question_Id") %>%
mutate(Total_Time = Answered_Date - Creation_Date) %>%
filter(Total_Time > 0) %>%
select("Question_Id", "Answer_Id", "Creator_Id", "Testee_Id", "Creation_Date", "Answered_Date", "Total_Time", "Score", "Total_Score", "Question", "Answer", "Correct_Answer")
answers <- read_csv("Answers_trunc.csv", skip = 1, col_names = c("Answer_Id", "Testee_Id", "Answered_Date", "Question_Id", "Score", "Answer", "X7"))
questions <- read_csv("Questions_trunc.csv", skip = 1, col_names = c("Question_Id", "Creator_Id", "Creation_Date", "Total_Score", "Question", "Correct_Answer", "X7"))
data <-
answerS %>%
left_join(question, "Question_Id") %>%
mutate(Total_Time = Answered_Date - Creation_Date) %>%
filter(Total_Time > 0) %>%
select("Question_Id", "Answer_Id", "Creator_Id", "Testee_Id", "Creation_Date", "Answered_Date", "Total_Time", "Score", "Total_Score", "Question", "Answer", "Correct_Answer")
